#!/usr/bin/env bash

# This script is used to manage the user's subscriptions to Exercism repos.
# The goal of this is to reduce the number of notifications on gets.
#
# The script takes one (required) argument for the action to perform:
# - 'export': export the user's subscriptions to the 'manage-notifications.json` file
# - 'update': update the user's subscriptions based on the 'manage-notifications.json` file
# - 'review': review the user's subscriptions in the 'manage-notifications.json` file
# - 'unsubscribe-new': change the status of new subscriptions from 'SUBSCRIBED' to 'UNSUBSCRIBED' in the `manage-notifications.json` file
#
# Example: export the subscriptions
# bin/manage export
#
# Example: update the subscriptions
# bin/manage update

help_and_exit() {
    echo >&2 "Manage the user's notifications by setting the subscription status of Exercism repos."
    echo >&2 "Usage: ${0} <export|update|review|unsubscribe-new>"
    exit 1
}

die() { echo >&2 "$*"; exit 1; }

required_tool() {
    command -v "$1" >/dev/null 2>&1 ||
        die "${1} is required but not installed. Please install it and make sure it's in your PATH."
}

require_subscriptions_file() {
    [[ -f "${subscriptions_file}" ]] || 
        die "No '${subscriptions_file}' file found. Please run '${0} export' first."
}

require_recent_gh() {
    gh api --help | grep -e '--slurp' >/dev/null 2>&1 ||
        die $'Your GitHub CLI is outdated and needs to be updated to v2.48.0 or greater.'
}

require_exercism_org_member() {
    gh api user/memberships/orgs/exercism >/dev/null 2>&1 ||
        die $'The GitHub CLI\'s authenticated user is *not* a member of the Exercism GitHub organization.\nCheck the README.md file for information on how to fix this.'
}

(( $# == 1 )) || help_and_exit

required_tool gh
required_tool jq
require_recent_gh
require_exercism_org_member

subscriptions_file="subscriptions.json"

download_subscriptions() {
    # shellcheck disable=SC2016
    gh api graphql --slurp --paginate -f query='
      query ($endCursor: String) {
        search(
          query: "org:exercism archived:false"
          type: REPOSITORY
          first: 100
          after: $endCursor
        ) {
          nodes {
            ... on Repository {
              nameWithOwner
              viewerSubscription
              repositoryTopics(first: 100) {
                nodes {
                  topic {
                    name
                  }
                }
              }
            }
          }
          pageInfo {
            hasNextPage
            endCursor
          }
        }
      }' | jq -r '
        [ .[].data.search.nodes[] | select(.viewerSubscription != "IGNORED") ]
        | map({repo: .nameWithOwner, status: .viewerSubscription, topics: .repositoryTopics.nodes | map(.topic.name), new: true})
        | sort_by(.repo)'
}

export() {
    local tmp_file

    if [[ ! -f "${subscriptions_file}" ]]; then
        jq -r -c -n '[]' > "${subscriptions_file}"
    fi

    echo "Exporting subscriptions..."

    (
        tmp_file=$(mktemp)
        trap 'rm -rf "${tmp_file}"' EXIT

        existing_repos=$(jq -c 'map(.repo)' "${subscriptions_file}")
        download_subscriptions | jq --argjson existing_repos "${existing_repos}" '[.[] | . as $row | .new = ($existing_repos | any(index($row.repo)) | not)]' > "${tmp_file}" && mv "${tmp_file}" "${subscriptions_file}"
    )

    echo "The subscriptions have been exported to the '${subscriptions_file}' file."
}

update() {
    local repo
    local status

    require_subscriptions_file

    echo "Updating subscriptions..."
    current_subscriptions=$(download_subscriptions)

    jq -c -r '.[]' "${subscriptions_file}" | while read -r subscription; do
        repo=$(echo "${subscription}" | jq -r '.repo')
        status=$(echo "${subscription}" | jq -r '.status')
        current_status=$(echo -e "${current_subscriptions}" | jq -r --arg repo "${repo}" '(map(select(.repo == $repo)) | map(.status) | first) // "IGNORE"')

        if [[ "${status}" == "${current_status}" ]]; then
            echo "${repo}: already up-to-date (skipped)"
            continue
        fi

        case "${status}" in
            "SUBSCRIBED")
                echo "${repo}: notified of all conversations (updating)"
                gh api --method PUT "repos/${repo}/subscription" -F "subscribed=true" > /dev/null
                echo "${repo}: notified of all conversations (updated)"
                ;;
            "UNSUBSCRIBED")
                echo "${repo}: only notified when participating or @mentioned (updating)"
                gh api --method DELETE "repos/${repo}/subscription" > /dev/null
                echo "${repo}: only notified when participating or @mentioned (updated)"
                ;;
            "IGNORE")
                echo "${repo}: never notified/ignored (updating)"
                gh api --method PUT "repos/${repo}/subscription" -F "ignored=true" > /dev/null
                echo "${repo}: never notified/ignored (updated)"
                ;;
            *) die "Invalid status '${status}'" ;;
        esac
    done

    echo "The subscriptions have been updated."
}

unsubscribe_new() {
    local tmp_file

    require_subscriptions_file

    tmp_file=$(mktemp)
    jq '[.[] | if .new and .status == "SUBSCRIBED" then .status = "UNSUBSCRIBED" else . end]' "${subscriptions_file}" > "${tmp_file}" && mv "${tmp_file}" "${subscriptions_file}"
    
    echo "The new subscriptions with status 'SUBSCRIBED' have their status changed to 'UNSUBSCRIBED' in the '${subscriptions_file}' file."
    echo "To update the subscriptions in GitHub, run: '${0} update'"
}

review() {
    jq -rc '.[] | [.status, .repo] | @tsv' "${subscriptions_file}" | sort | column -t | less
}

case "${1}" in
    "export") export ;;
    "update") update ;;
    "review") review ;;
    "unsubscribe-new") unsubscribe_new ;;
    *) help_and_exit ;;
esac
